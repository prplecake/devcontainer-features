name: "CI - Test Features"
on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:

jobs:
  test-autogenerated:
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix:
        features:
          - dart-sass
        baseImage:
          - debian:latest
          - ubuntu:latest
          - mcr.microsoft.com/devcontainers/base:debian
    steps:
      - uses: actions/checkout@v4

      - name: "Install latest devcontainer CLI"
        run: npm install -g @devcontainers/cli

      - name: "Generating tests for '${{ matrix.features }}' against '${{ matrix.baseImage }}'"
        run: devcontainer features test --skip-scenarios -f ${{ matrix.features }} -i ${{ matrix.baseImage }} .
      - id: set-output
        run: echo "success=true" >> $GITHUB_OUTPUT
    # store success output flag for ci job
    outputs:
      success: ${{ steps.set-output.outputs.success }}

  test-scenarios:
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix:
        features:
          - dart-sass
    steps:
      - uses: actions/checkout@v4

      - name: "Install latest devcontainer CLI"
        run: npm install -g @devcontainers/cli

      - name: "Generating tests for '${{ matrix.features }}' scenarios"
        run: devcontainer features test -f ${{ matrix.features }} --skip-autogenerated --skip-duplicated .
      - id: set-output
        run: echo "success=true" >> $GITHUB_OUTPUT
    # store success output flag for ci job
    outputs:
      success: ${{ steps.set-output.outputs.success }}

  test-global:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4

      - name: "Install latest devcontainer CLI"
        run: npm install -g @devcontainers/cli

      - name: "Testing global scenarios"
        run: devcontainer features test --global-scenarios-only .
      - id: set-output
        run: echo "success=true" >> $GITHUB_OUTPUT
    # store success output flag for ci job
    outputs:
      success: ${{ steps.set-output.outputs.success }}

  ci:
    runs-on: ubuntu-latest
    if: always() # always run, so we never skip the check
    needs: [test-global, test-autogenerated, test-scenarios]
    steps:
      # pass step only when output of previous after-shards job is set
      # in case at least one of the shard fails, after-shards is skipped
      # and the output will not be set, which will then cause the ci job to fail
      - run: |
          global_passed="${{ needs.test-global.outputs.success }}"
          autogenerated_passed="${{ needs.test-autogenerated.outputs.success }}"
          scenarios_passed="${{ needs.test-scenarios.outputs.success }}"
          if [[ $global_passed == "true" ]] && [[ $autogenerated_passed == "true" ]] && [[ $scenarios_passed == "true" ]]; then
            echo "Tests passed"
            exit 0
          else
            echo "Tests failed"
            exit 1
          fi